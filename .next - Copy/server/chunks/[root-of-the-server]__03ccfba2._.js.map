{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectToDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      dbName: 'YourDBName', // optional if already in URI\r\n      bufferCommands: false,\r\n    }).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectToDB;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAgB,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAgB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;YACR,gBAAgB;QAClB,GAAG,IAAI,CAAC,CAAC;YACP,OAAO;QACT;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/station-info/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport  dbConnect  from '@/lib/dbConnect';\r\nimport  Station  from '@/models/station';\r\n\r\n// ── GET: saare stations\r\nexport async function GET() {\r\n  try {\r\n    await dbConnect();\r\n    const stations = await Station.find().sort({ createdAt: -1 });\r\n    return NextResponse.json(stations);\r\n  } catch (err) {\r\n    return NextResponse.json({ message: 'Fetch failed' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// ── POST: naya station add karo\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await dbConnect();\r\n    const body = await req.json();        // ← Postman ka JSON yahan aayega\r\n    const station = await Station.create(body);\r\n    return NextResponse.json(station, { status: 201 });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ message: err.message }, { status: 400 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;;;AAIO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,WAAW,MAAM,QAAQ,IAAI,GAAG,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE;QAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACtE;AACF;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,OAAO,MAAM,IAAI,IAAI,IAAW,iCAAiC;QACvE,MAAM,UAAU,MAAM,QAAQ,MAAM,CAAC;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,KAAU;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}