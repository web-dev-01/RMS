{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectToDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      dbName: 'YourDBName', // optional if already in URI\r\n      bufferCommands: false,\r\n    }).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectToDB;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAgB,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAgB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,QAAQ;YACR,gBAAgB;QAClB,GAAG,IAAI,CAAC,CAAC;YACP,OAAO;QACT;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/User.ts"],"sourcesContent":["import mongoose, { Schema, models } from 'mongoose';\r\n\r\nconst userSchema = new Schema(\r\n  {\r\n    fullName: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    password: { type: String, required: true },\r\n    role: {\r\n      type: String,\r\n      enum: ['Admin', 'Employee', 'Owner'],\r\n      default: 'Employee',\r\n    },\r\n    isVerified: { type: Boolean, default: false },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst User = models.User || mongoose.model('User', userSchema);\r\nexport default User;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;YAAY;SAAQ;QACpC,SAAS;IACX;IACA,YAAY;QAAE,MAAM;QAAS,SAAS;IAAM;AAC9C,GACA;IAAE,YAAY;AAAK;AAGrB,MAAM,OAAO,yGAAA,CAAA,SAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCACpC","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/verifyEmailTemplate.ts"],"sourcesContent":["export const verifyEmailTemplate = (token: string) => {\r\n  const link = `${process.env.NEXT_PUBLIC_BASE_URL}/verify-email?token=${token}`;\r\n  return `\r\n    <div>\r\n      <h2>Verify Your Email</h2>\r\n      <p>Click the link below to verify your email:</p>\r\n      <a href=\"${link}\">${link}</a>\r\n    </div>\r\n  `;\r\n};\r\n"],"names":[],"mappings":";;;AAAO,MAAM,sBAAsB,CAAC;IAClC,MAAM,OAAO,GAAG,QAAQ,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,OAAO;IAC9E,OAAO,CAAC;;;;eAIK,EAAE,KAAK,EAAE,EAAE,KAAK;;EAE7B,CAAC;AACH","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/sendEmail.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\r\nimport { verifyEmailTemplate } from './verifyEmailTemplate';\r\n\r\nexport async function sendVerificationEmail(email: string, token: string) {\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      user: process.env.EMAIL_USER!,\r\n      pass: process.env.EMAIL_PASS!,\r\n    },\r\n  });\r\n\r\n  const mailOptions = {\r\n    from: process.env.EMAIL_USER!,\r\n    to: email,\r\n    subject: 'Verify Your Email',\r\n    html: verifyEmailTemplate(token),\r\n  };\r\n\r\n  await transporter.sendMail(mailOptions);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,sBAAsB,KAAa,EAAE,KAAa;IACtE,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;QAC7C,SAAS;QACT,MAAM;YACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;IACF;IAEA,MAAM,cAAc;QAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,IAAI;QACJ,SAAS;QACT,MAAM,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE;IAC5B;IAEA,MAAM,YAAY,QAAQ,CAAC;AAC7B","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/generateToken.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport const generateToken = (email: string): string => {\r\n  const secret = process.env.JWT_SECRET;\r\n\r\n  if (!secret) {\r\n    throw new Error('JWT_SECRET is not defined in environment variables');\r\n  }\r\n\r\n  const token = jwt.sign({ email }, secret, { expiresIn: '1h' });\r\n  return token;\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,gBAAgB,CAAC;IAC5B,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU;IAErC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAM,GAAG,QAAQ;QAAE,WAAW;IAAK;IAC5D,OAAO;AACT","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import connectToDB from '@/lib/db';\r\nimport User from '@/models/User';\r\nimport { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport { sendVerificationEmail } from '@/utils/sendEmail';\r\nimport { generateToken } from '@/utils/generateToken';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await connectToDB();\r\n\r\n    const { fullName, email, password, confirmPassword } = await req.json();\r\n\r\n    if (!fullName || !email || !password || !confirmPassword) {\r\n      return NextResponse.json({ success: false, message: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return NextResponse.json({ success: false, message: 'Passwords do not match' }, { status: 400 });\r\n    }\r\n\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json({ success: false, message: 'Email already exists' }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newUser = new User({\r\n      fullName,\r\n      email,\r\n      password: hashedPassword,\r\n      isVerified: false,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    const token = generateToken(email);\r\n    await sendVerificationEmail(email, token);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Registration successful. Please verify your email.',\r\n      redirectTo: '/verify-email',\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Registration Error:', error);\r\n\r\n    // Duplicate key error\r\n    if (error.code === 11000 && error.keyPattern?.email) {\r\n      return NextResponse.json({ success: false, message: 'Email already exists' }, { status: 400 });\r\n    }\r\n\r\n    return NextResponse.json({ success: false, message: 'Something went wrong' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAW,AAAD;QAEhB,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,IAAI;QAErE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjG;QAEA,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChG;QAEA,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,MAAM,UAAU,IAAI,gHAAA,CAAA,UAAI,CAAC;YACvB;YACA;YACA,UAAU;YACV,YAAY;QACd;QAEA,MAAM,QAAQ,IAAI;QAElB,MAAM,QAAQ,CAAA,GAAA,wHAAA,CAAA,gBAAa,AAAD,EAAE;QAC5B,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,YAAY;QACd;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QAErC,sBAAsB;QACtB,IAAI,MAAM,IAAI,KAAK,SAAS,MAAM,UAAU,EAAE,OAAO;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,SAAS;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC9F;AACF","debugId":null}}]
}