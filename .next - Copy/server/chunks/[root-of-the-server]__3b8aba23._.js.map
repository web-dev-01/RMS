{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n    }).then((mongoose) => {\r\n      console.log(\"✅ MongoDB connected\");\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAgB,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAgB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;QAClB,GAAG,IAAI,CAAC,CAAC;YACP,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/User.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema(\r\n  {\r\n    fullName: {\r\n      type: String,\r\n      required: [true, 'Full name is required'],\r\n      trim: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Email is required'],\r\n      unique: true,\r\n      lowercase: true,\r\n      trim: true,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, 'Password is required'],\r\n      minlength: [6, 'Password must be at least 6 characters'],\r\n    },\r\n    phoneNumber: {\r\n      type: String,\r\n      trim: true,\r\n      match: [/^\\+?\\d{10,15}$/, 'Please enter a valid phone number (e.g., +919876543210)'],\r\n    },\r\n    image: {\r\n      type: String, // URL of the profile picture\r\n      default: null,\r\n    },\r\n    role: {\r\n      type: String,\r\n      enum: ['User', 'Admin'],\r\n      default: 'User',\r\n    },\r\n    isVerified: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    verificationCode: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// Prevent model overwrite issue in dev\r\nexport default mongoose.models.User || mongoose.model('User', UserSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CACpC;IACE,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;QACzC,MAAM;IACR;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,WAAW;QACX,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,WAAW;YAAC;YAAG;SAAyC;IAC1D;IACA,aAAa;QACX,MAAM;QACN,MAAM;QACN,OAAO;YAAC;YAAkB;SAA0D;IACtF;IACA,OAAO;QACL,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAQ;SAAQ;QACvB,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,kBAAkB;QAChB,MAAM;QACN,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;uCAIa,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/sendEmail.ts"],"sourcesContent":["import { Resend } from 'resend';\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY!);\r\n\r\nexport const sendVerificationEmail = async (email: string, token: string) => {\r\n  const confirmLink = `${process.env.DOMAIN}/verify-email?token=${token}`;\r\n\r\n  await resend.emails.send({\r\n    from: 'no-reply@yourdomain.com',\r\n    to: email,\r\n    subject: 'Verify your email',\r\n    html: `<p>Click the link below to verify your email:</p>\r\n           <a href=\"${confirmLink}\">${confirmLink}</a>`,\r\n  });\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;AAE7C,MAAM,wBAAwB,OAAO,OAAe;IACzD,MAAM,cAAc,GAAG,QAAQ,GAAG,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO;IAEvE,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;QACvB,MAAM;QACN,IAAI;QACJ,SAAS;QACT,MAAM,CAAC;oBACS,EAAE,YAAY,EAAE,EAAE,YAAY,IAAI,CAAC;IACrD;AACF","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/generateToken.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport const generateToken = (email: string) => {\r\n  return jwt.sign({ email }, process.env.JWT_SECRET!, { expiresIn: '1h' });\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,gBAAgB,CAAC;IAC5B,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAM,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAG;QAAE,WAAW;IAAK;AACxE","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import dbConnect from '@/lib/dbConnect';\r\nimport User from '@/models/User';\r\nimport { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport { sendVerificationEmail } from '@/utils/sendEmail';\r\nimport { generateToken } from '@/utils/generateToken';\r\nimport crypto from 'crypto';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await dbConnect();\r\n\r\n    const { fullName, email, password, confirmPassword, phoneNumber } = await req.json();\r\n\r\n    if (!fullName || !email || !password || !confirmPassword) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'All fields are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Passwords do not match' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Email already exists' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const verificationCode = crypto.randomBytes(20).toString('hex');\r\n\r\n    const newUser = new User({\r\n      fullName,\r\n      email,\r\n      password: hashedPassword,\r\n      phoneNumber,\r\n      verificationCode,\r\n      isVerified: false,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    const token = generateToken(email);\r\n    await sendVerificationEmail(email, token);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        message: 'Registration successful. Please verify your email.',\r\n        redirectTo: '/verify-email',\r\n      },\r\n      { status: 201 }\r\n    );\r\n  } catch (error: any) {\r\n    console.error('Registration Error:', error);\r\n\r\n    if (error.code === 11000 && error.keyPattern?.email) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Email already exists' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (error.code === 'EAUTH') {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Email service error: Invalid credentials or setup.' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { success: false, message: 'Internal Server Error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QAElF,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAyB,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,MAAM,mBAAmB,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;QAEzD,MAAM,UAAU,IAAI,gHAAA,CAAA,UAAI,CAAC;YACvB;YACA;YACA,UAAU;YACV;YACA;YACA,YAAY;QACd;QAEA,MAAM,QAAQ,IAAI;QAElB,MAAM,QAAQ,CAAA,GAAA,wHAAA,CAAA,gBAAa,AAAD,EAAE;QAC5B,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT,YAAY;QACd,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QAErC,IAAI,MAAM,IAAI,KAAK,SAAS,MAAM,UAAU,EAAE,OAAO;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAuB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAqD,GAChF;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAwB,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}