{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/platforms-devices/route.ts"],"sourcesContent":["// app/api/rms/platforms-devices/route.ts\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\ntype DeviceData = {\r\n  id: string;\r\n  name: string;\r\n  location: string;\r\n  status: 'active' | 'inactive';\r\n  lastUpdated: string;\r\n};\r\n\r\n// Mock database\r\nlet devices: DeviceData[] = [\r\n  {\r\n    id: 'DEV001',\r\n    name: 'Main Server',\r\n    location: 'Data Center A',\r\n    status: 'active',\r\n    lastUpdated: new Date().toISOString(),\r\n  },\r\n  {\r\n    id: 'DEV002',\r\n    name: 'Backup Server',\r\n    location: 'Data Center B',\r\n    status: 'inactive',\r\n    lastUpdated: new Date(Date.now() - 86400000).toISOString(),\r\n  },\r\n  {\r\n    id: 'DEV003',\r\n    name: 'Edge Router',\r\n    location: 'Office Floor 1',\r\n    status: 'active',\r\n    lastUpdated: new Date().toISOString(),\r\n  },\r\n];\r\n\r\n// Helper function to find device by ID\r\nconst findDeviceById = (id: string): DeviceData | undefined => {\r\n  return devices.find(device => device.id === id);\r\n};\r\n\r\n// Helper function to generate new device ID\r\nconst generateDeviceId = (): string => {\r\n  const maxId = devices.reduce((max, device) => {\r\n    const numId = parseInt(device.id.replace('DEV', ''));\r\n    return numId > max ? numId : max;\r\n  }, 0);\r\n  return `DEV${String(maxId + 1).padStart(3, '0')}`;\r\n};\r\n\r\n// Handle GET request - Fetch all devices\r\nexport async function GET() {\r\n  try {\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Devices fetched successfully',\r\n      data: devices,\r\n      count: devices.length,\r\n    });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { \r\n        success: false,\r\n        error: 'Failed to fetch devices',\r\n        message: 'Internal server error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Handle POST request - Add new device\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body: Partial<DeviceData> = await req.json();\r\n\r\n    // Validation\r\n    if (!body.name || !body.location) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Validation failed',\r\n          message: 'Device name and location are required'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if device name already exists\r\n    const existingDevice = devices.find(device => \r\n      device.name.toLowerCase() === body.name.toLowerCase()\r\n    );\r\n    \r\n    if (existingDevice) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Device name already exists',\r\n          message: 'A device with this name already exists'\r\n        },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    const newDevice: DeviceData = {\r\n      id: generateDeviceId(),\r\n      name: body.name.trim(),\r\n      location: body.location.trim(),\r\n      status: body.status || 'active',\r\n      lastUpdated: new Date().toISOString(),\r\n    };\r\n\r\n    devices.push(newDevice);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Device added successfully',\r\n      device: newDevice,\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('POST Error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false,\r\n        error: 'Internal server error',\r\n        message: 'Failed to add device'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Handle PUT request - Update existing device\r\nexport async function PUT(req: NextRequest) {\r\n  try {\r\n    const body: Partial<DeviceData & { id: string }> = await req.json();\r\n\r\n    // Validation\r\n    if (!body.id) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Device ID is required',\r\n          message: 'Device ID must be provided for updates'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const deviceIndex = devices.findIndex(device => device.id === body.id);\r\n    \r\n    if (deviceIndex === -1) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Device not found',\r\n          message: `Device with ID ${body.id} does not exist`\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Check if new name conflicts with existing devices (excluding current device)\r\n    if (body.name) {\r\n      const nameConflict = devices.find(device => \r\n        device.id !== body.id && \r\n        device.name.toLowerCase() === body.name.toLowerCase()\r\n      );\r\n      \r\n      if (nameConflict) {\r\n        return NextResponse.json(\r\n          { \r\n            success: false,\r\n            error: 'Device name already exists',\r\n            message: 'A device with this name already exists'\r\n          },\r\n          { status: 409 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Update device\r\n    const updatedDevice: DeviceData = {\r\n      ...devices[deviceIndex],\r\n      ...(body.name && { name: body.name.trim() }),\r\n      ...(body.location && { location: body.location.trim() }),\r\n      ...(body.status && { status: body.status }),\r\n      lastUpdated: new Date().toISOString(),\r\n    };\r\n\r\n    devices[deviceIndex] = updatedDevice;\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Device updated successfully',\r\n      device: updatedDevice,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('PUT Error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false,\r\n        error: 'Internal server error',\r\n        message: 'Failed to update device'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Handle DELETE request - Delete device\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    const url = new URL(req.url);\r\n    const deviceId = url.searchParams.get('id');\r\n\r\n    if (!deviceId) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Device ID is required',\r\n          message: 'Device ID must be provided for deletion'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const deviceIndex = devices.findIndex(device => device.id === deviceId);\r\n    \r\n    if (deviceIndex === -1) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: 'Device not found',\r\n          message: `Device with ID ${deviceId} does not exist`\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const deletedDevice = devices[deviceIndex];\r\n    devices.splice(deviceIndex, 1);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Device deleted successfully',\r\n      device: deletedDevice,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('DELETE Error:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false,\r\n        error: 'Internal server error',\r\n        message: 'Failed to delete device'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}