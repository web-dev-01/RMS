{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/db.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nif (!uri) throw new Error('Please add your Mongo URI to .env.local');\r\n\r\nconst client = new MongoClient(uri);\r\nconst clientPromise = client.connect();\r\n\r\nexport default clientPromise;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;AAE1B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;AAC/B,MAAM,gBAAgB,OAAO,OAAO;uCAErB","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/sendEmail.ts"],"sourcesContent":["// utils/sendEmail.ts\r\nexport async function sendVerificationEmail(email: string, code: number) {\r\n  console.log(`Sending verification code ${code} to ${email}`);\r\n  // implement actual email logic here later\r\n}\r\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;AACd,eAAe,sBAAsB,KAAa,EAAE,IAAY;IACrE,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE,OAAO;AAC3D,0CAA0C;AAC5C","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport db from '@/lib/db';\r\nimport { sendVerificationEmail } from '@/utils/sendEmail';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { email, password } = body;\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json({ message: 'Please fill all fields' }, { status: 400 });\r\n    }\r\n\r\n    const usersCollection = db.collection('users');\r\n\r\n    const existingUser = await usersCollection.findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json({ message: 'Email already registered' }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const verificationCode = Math.floor(100000 + Math.random() * 900000);\r\n\r\n    await usersCollection.insertOne({\r\n      email,\r\n      password: hashedPassword,\r\n      verificationCode,\r\n      isVerified: false,\r\n      fullName: '',\r\n      phoneNumber: '',\r\n      profilePicture: '',\r\n      isProfileComplete: false,\r\n      role: 'user',\r\n      isActive: false,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n\r\n    await sendVerificationEmail(email, verificationCode);\r\n\r\n    return NextResponse.json({\r\n      message: 'User registered successfully. Please check your email for the verification code.',\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,MAAM,kBAAkB,2GAAA,CAAA,UAAE,CAAC,UAAU,CAAC;QAEtC,MAAM,eAAe,MAAM,gBAAgB,OAAO,CAAC;YAAE;QAAM;QAC3D,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,mBAAmB,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK;QAE7D,MAAM,gBAAgB,SAAS,CAAC;YAC9B;YACA,UAAU;YACV;YACA,YAAY;YACZ,UAAU;YACV,aAAa;YACb,gBAAgB;YAChB,mBAAmB;YACnB,MAAM;YACN,UAAU;YACV,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}