{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/event-logs/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport mongoose from 'mongoose';\r\nimport { EventLog  } from '@/models/eventLogModel';\r\n\r\nconst connectToDB = async () => {\r\n  if (mongoose.connection.readyState === 0) {\r\n    await mongoose.connect(process.env.MONGODB_URI as string, {\r\n      dbName: 'rms',\r\n    });\r\n  }\r\n};\r\n\r\n// GET - Fetch all logs\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const logs = await eventLogModel.find().sort({ Timestamp: -1 });\r\n    return NextResponse.json(logs, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to fetch logs' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST - Create new log\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const data = await req.json();\r\n    const newLog = new eventLogModel(data);\r\n    await newLog.save();\r\n    return NextResponse.json(newLog, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to save log' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT - Update existing log by _id\r\nexport async function PUT(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const { _id, ...updateData } = await req.json();\r\n    const updatedLog = await eventLogModel.findByIdAndUpdate(_id, updateData, {\r\n      new: true,\r\n    });\r\n    return NextResponse.json(updatedLog, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to update log' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE - Delete log by _id (pass via query param)\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const url = new URL(req.url);\r\n    const id = url.searchParams.get('id');\r\n\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'ID is required' }, { status: 400 });\r\n    }\r\n\r\n    await eventLogModel.findByIdAndDelete(id);\r\n    return NextResponse.json({ message: 'Deleted successfully' }, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to delete log' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGA,MAAM,cAAc;IAClB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY;YACxD,QAAQ;QACV;IACF;AACF;AAGO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM;QACN,MAAM,OAAO,MAAM,cAAc,IAAI,GAAG,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC/C,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM;QACN,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,SAAS,IAAI,cAAc;QACjC,MAAM,OAAO,IAAI;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAqB,GAAG;YAAE,QAAQ;QAAI;IAC1E;AACF;AAGO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM;QACN,MAAM,EAAE,GAAG,EAAE,GAAG,YAAY,GAAG,MAAM,IAAI,IAAI;QAC7C,MAAM,aAAa,MAAM,cAAc,iBAAiB,CAAC,KAAK,YAAY;YACxE,KAAK;QACP;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAGO,eAAe,OAAO,GAAgB;IAC3C,IAAI;QACF,MAAM;QACN,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,KAAK,IAAI,YAAY,CAAC,GAAG,CAAC;QAEhC,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,cAAc,iBAAiB,CAAC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC9E,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}