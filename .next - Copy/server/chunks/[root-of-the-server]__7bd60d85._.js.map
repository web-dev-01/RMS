{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/sendEmail.ts"],"sourcesContent":["// utils/sendEmail.ts\r\nexport async function sendVerificationEmail(email: string, code: number) {\r\n  console.log(`Sending verification code ${code} to ${email}`);\r\n  // implement actual email logic here later\r\n}\r\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;AACd,eAAe,sBAAsB,KAAa,EAAE,IAAY;IACrE,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE,OAAO;AAC3D,0CAA0C;AAC5C","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/db.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nconst uri = process.env.MONGODB_URI!;\r\nconst options = {};\r\n\r\nlet client: MongoClient;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\ndeclare global {\r\n  var _mongoClientPromise: Promise<MongoClient> | undefined;\r\n}\r\n\r\nif (!global._mongoClientPromise) {\r\n  client = new MongoClient(uri, options);\r\n  global._mongoClientPromise = client.connect();\r\n}\r\n\r\nclientPromise = global._mongoClientPromise!;\r\n\r\nconst connectToDB = async () => {\r\n  const client = await clientPromise;\r\n  return client.db(); // ‚Üê this gives you the `db` instance to access collections\r\n};\r\n\r\nexport default connectToDB;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAMJ,IAAI,CAAC,OAAO,mBAAmB,EAAE;IAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;IAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO;AAC7C;AAEA,gBAAgB,OAAO,mBAAmB;AAE1C,MAAM,cAAc;IAClB,MAAM,SAAS,MAAM;IACrB,OAAO,OAAO,EAAE,IAAI,2DAA2D;AACjF;uCAEe","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport { sendVerificationEmail } from '@/utils/sendEmail';\r\nimport connectToDB from '@/lib/db';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { fullName, email, password, confirmPassword } = body;\r\n\r\n    // Field check\r\n    if (!fullName || !email || !password || !confirmPassword) {\r\n      return NextResponse.json({ message: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return NextResponse.json({ message: 'Passwords do not match' }, { status: 400 });\r\n    }\r\n\r\n    const db = await connectToDB();\r\n    const usersCollection = db.collection('users');\r\n\r\n    // Existing user check\r\n    const existingUser = await usersCollection.findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json({ message: 'Email already registered' }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const verificationCode = Math.floor(100000 + Math.random() * 900000);\r\n\r\n    // New user insert\r\n    await usersCollection.insertOne({\r\n      fullName,\r\n      email,\r\n      password: hashedPassword,\r\n      verificationCode,\r\n      isVerified: false,\r\n      phoneNumber: '',\r\n      profilePicture: '',\r\n      isProfileComplete: false,\r\n      role: 'user',\r\n      isActive: false,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n\r\n    // Email send\r\n    await sendVerificationEmail(email, verificationCode);\r\n\r\n    return NextResponse.json(\r\n      { message: 'Registration successful. Check your email for verification code.' },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Signup error:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG;QAEvD,cAAc;QACd,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,MAAM,KAAK,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAW,AAAD;QAC3B,MAAM,kBAAkB,GAAG,UAAU,CAAC;QAEtC,sBAAsB;QACtB,MAAM,eAAe,MAAM,gBAAgB,OAAO,CAAC;YAAE;QAAM;QAC3D,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,mBAAmB,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK;QAE7D,kBAAkB;QAClB,MAAM,gBAAgB,SAAS,CAAC;YAC9B;YACA;YACA,UAAU;YACV;YACA,YAAY;YACZ,aAAa;YACb,gBAAgB;YAChB,mBAAmB;YACnB,MAAM;YACN,UAAU;YACV,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,aAAa;QACb,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAmE,GAC9E;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}