{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n    }).then((mongoose) => {\r\n      console.log(\"✅ MongoDB connected\");\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAgB,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAgB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;QAClB,GAAG,IAAI,CAAC,CAAC;YACP,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/eventLogModel.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\n\r\n// Define interface for event log document\r\nexport interface IEventLog extends Document {\r\n  Timestamp: Date;\r\n  EventID: number;\r\n  EventType: 'Information' | 'Warning' | 'Error' | 'Critical';\r\n  Source: string;\r\n  Description: string;\r\n  IsSentToServer: boolean;\r\n}\r\n\r\n// Define schema with required fields and enum for EventType\r\nconst EventLogSchema = new Schema<IEventLog>({\r\n  Timestamp: { type: Date, required: true },\r\n  EventID: { type: Number, required: true },\r\n  EventType: {\r\n    type: String,\r\n    enum: ['Information', 'Warning', 'Error', 'Critical'],\r\n    required: true,\r\n  },\r\n  Source: { type: String, required: true },\r\n  Description: { type: String, required: true },\r\n  IsSentToServer: { type: Boolean, required: true },\r\n}, { timestamps: true });\r\n\r\n// Create or reuse model\r\nexport const EventLog = mongoose.models.EventLog || mongoose.model<IEventLog>('EventLog', EventLogSchema);"],"names":[],"mappings":";;;AAAA;;AAYA,4DAA4D;AAC5D,MAAM,iBAAiB,IAAI,yGAAA,CAAA,SAAM,CAAY;IAC3C,WAAW;QAAE,MAAM;QAAM,UAAU;IAAK;IACxC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,WAAW;QACT,MAAM;QACN,MAAM;YAAC;YAAe;YAAW;YAAS;SAAW;QACrD,UAAU;IACZ;IACA,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,gBAAgB;QAAE,MAAM;QAAS,UAAU;IAAK;AAClD,GAAG;IAAE,YAAY;AAAK;AAGf,MAAM,WAAW,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAY,YAAY","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/event-logs/route.ts"],"sourcesContent":["// app/api/rms/event-logs/route.ts\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport dbConnect from '@/lib/dbConnect';\r\nimport { EventLog } from '@/models/eventLogModel';\r\nimport mongoose from 'mongoose';\r\n\r\n// GET: Fetch all event logs, sorted by Timestamp (newest first)\r\nexport const GET = async () => {\r\n  try {\r\n    // Connect to MongoDB\r\n    await dbConnect();\r\n    \r\n    // Fetch all logs, sort by Timestamp descending, and use lean for performance\r\n    const logs = await EventLog.find().sort({ Timestamp: -1 }).lean();\r\n    \r\n    // Return logs with success status\r\n    return NextResponse.json({ success: true, data: logs }, { status: 200 });\r\n  } catch (error: any) {\r\n    // Log error for debugging\r\n    console.error('GET Error:', error.message, error.stack);\r\n    \r\n    // Handle Mongoose-specific errors\r\n    if (error instanceof mongoose.Error) {\r\n      return NextResponse.json(\r\n        { success: false, message: `Database error: ${error.message}` },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    // Generic server error\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to fetch event logs' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};\r\n\r\n// POST: Create a new event log\r\nexport const POST = async (req: NextRequest) => {\r\n  try {\r\n    // Connect to MongoDB\r\n    await dbConnect();\r\n    \r\n    // Parse request body\r\n    const body = await req.json();\r\n    const { EventID, EventType, Source, Description, IsSentToServer, Timestamp } = body;\r\n\r\n    // Validate required fields\r\n    if (!EventID || !Number.isInteger(EventID)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'EventID is required and must be an integer' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (!['Information', 'Warning', 'Error', 'Critical'].includes(EventType)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'EventType must be one of: Information, Warning, Error, Critical' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (!Source || typeof Source !== 'string') {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Source is required and must be a string' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (!Description || typeof Description !== 'string') {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Description is required and must be a string' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (typeof IsSentToServer !== 'boolean') {\r\n      return NextResponse.json(\r\n        { success: false, message: 'IsSentToServer is required and must be a boolean' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    if (Timestamp && isNaN(new Date(Timestamp).getTime())) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Timestamp must be a valid ISO date string' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create new log with validated data\r\n    const newLog = await EventLog.create({\r\n      EventID,\r\n      EventType,\r\n      Source,\r\n      Description,\r\n      IsSentToServer,\r\n      Timestamp: Timestamp ? new Date(Timestamp) : new Date(),\r\n    });\r\n\r\n    // Return created log with success status\r\n    return NextResponse.json({ success: true, data: newLog }, { status: 201 });\r\n  } catch (error: any) {\r\n    // Log error for debugging\r\n    console.error('POST Error:', error.message, error.stack);\r\n    \r\n    // Handle validation errors\r\n    if (error instanceof mongoose.Error.ValidationError) {\r\n      return NextResponse.json(\r\n        { success: false, message: `Validation error: ${error.message}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Handle duplicate key errors\r\n    if (error.code === 11000) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Event log with this EventID already exists' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Generic server error\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to create event log' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}