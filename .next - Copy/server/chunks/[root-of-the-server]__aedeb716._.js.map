{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/db.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nconst uri = process.env.MONGODB_URI!;\r\nconst options = {};\r\n\r\nlet client: MongoClient;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\ndeclare global {\r\n  var _mongoClientPromise: Promise<MongoClient> | undefined;\r\n}\r\n\r\nif (!global._mongoClientPromise) {\r\n  client = new MongoClient(uri, options);\r\n  global._mongoClientPromise = client.connect();\r\n}\r\n\r\nclientPromise = global._mongoClientPromise!;\r\n\r\nconst connectToDB = async () => {\r\n  const client = await clientPromise;\r\n  return client.db(); // ‚Üê this gives you the `db` instance to access collections\r\n};\r\n\r\nexport default connectToDB;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAMJ,IAAI,CAAC,OAAO,mBAAmB,EAAE;IAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;IAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO;AAC7C;AAEA,gBAAgB,OAAO,mBAAmB;AAE1C,MAAM,cAAc;IAClB,MAAM,SAAS,MAAM;IACrB,OAAO,OAAO,EAAE,IAAI,2DAA2D;AACjF;uCAEe","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/User.ts"],"sourcesContent":["// models/User.ts\r\nimport mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface IUser extends Document {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>({\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n});\r\n\r\nexport default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;;AAQA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAQ;IACnC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/verifyEmailTemplate.ts"],"sourcesContent":["export const verifyEmailTemplate = (token: string) => {\r\n  const link = `${process.env.NEXT_PUBLIC_BASE_URL}/verify-email?token=${token}`;\r\n  return `\r\n    <div>\r\n      <h2>Verify Your Email</h2>\r\n      <p>Click the link below to verify your email:</p>\r\n      <a href=\"${link}\">${link}</a>\r\n    </div>\r\n  `;\r\n};\r\n"],"names":[],"mappings":";;;AAAO,MAAM,sBAAsB,CAAC;IAClC,MAAM,OAAO,GAAG,QAAQ,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,OAAO;IAC9E,OAAO,CAAC;;;;eAIK,EAAE,KAAK,EAAE,EAAE,KAAK;;EAE7B,CAAC;AACH","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/sendEmail.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\r\nimport { verifyEmailTemplate } from './verifyEmailTemplate';\r\n\r\nexport async function sendVerificationEmail(email: string, token: string) {\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      user: process.env.EMAIL_USER!,\r\n      pass: process.env.EMAIL_PASS!,\r\n    },\r\n  });\r\n\r\n  const mailOptions = {\r\n    from: process.env.EMAIL_USER!,\r\n    to: email,\r\n    subject: 'Verify Your Email',\r\n    html: verifyEmailTemplate(token),\r\n  };\r\n\r\n  await transporter.sendMail(mailOptions);\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,sBAAsB,KAAa,EAAE,KAAa;IACtE,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;QAC7C,SAAS;QACT,MAAM;YACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;IACF;IAEA,MAAM,cAAc;QAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,IAAI;QACJ,SAAS;QACT,MAAM,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE;IAC5B;IAEA,MAAM,YAAY,QAAQ,CAAC;AAC7B","debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/utils/generateToken.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\n\r\nexport const generateToken = (email: string) => {\r\n  const token = jwt.sign({ email }, process.env.JWT_SECRET!, { expiresIn: '1h' });\r\n  return token;\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,gBAAgB,CAAC;IAC5B,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;QAAE;IAAM,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAG;QAAE,WAAW;IAAK;IAC7E,OAAO;AACT","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport dbConnect from '@/lib/db';\r\nimport User from '@/models/User';\r\nimport { sendVerificationEmail } from '@/utils/sendEmail';\r\nimport { generateToken } from '@/utils/generateToken';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await dbConnect();\r\n    const { fullName, email, password, confirmPassword } = await req.json();\r\n\r\n    if (!fullName || !email || !password || !confirmPassword) {\r\n      return NextResponse.json({ error: 'All fields are required' }, { status: 400 });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return NextResponse.json({ error: 'Passwords do not match' }, { status: 400 });\r\n    }\r\n\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return NextResponse.json({ error: 'User already exists' }, { status: 409 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 12);\r\n    const user = await User.create({\r\n      fullName,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    const token = generateToken(user._id.toString());\r\n\r\n    await sendVerificationEmail(email, token);\r\n\r\n    return NextResponse.json({ success: true, message: 'Registration successful. Please verify your email.' }, { status: 201 });\r\n  } catch (err) {\r\n    console.error('Registration Error:', err);\r\n    return NextResponse.json({ error: 'Something went wrong' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAS,AAAD;QACd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,IAAI;QAErE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,MAAM,eAAe,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YAC7B;YACA;YACA,UAAU;QACZ;QAEA,MAAM,QAAQ,CAAA,GAAA,wHAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,GAAG,CAAC,QAAQ;QAE7C,MAAM,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD,EAAE,OAAO;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,SAAS;QAAqD,GAAG;YAAE,QAAQ;QAAI;IAC3H,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}