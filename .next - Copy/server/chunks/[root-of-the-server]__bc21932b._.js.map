{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"❌ Please define the MONGODB_URI environment variable in .env.local\");\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI, {\r\n      bufferCommands: false,\r\n    }).then((mongoose) => {\r\n      console.log(\"✅ MongoDB connected\");\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,4CAAgB,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,4CAAgB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC7C,gBAAgB;QAClB,GAAG,IAAI,CAAC,CAAC;YACP,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/platformDeviceModel.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\n// Device Schema\r\nconst deviceSchema = new mongoose.Schema({\r\n  Id: { type: Number, required: true },\r\n  Created: { type: Date, required: true },\r\n  Updated: { type: Date, required: true },\r\n  DeviceType: { type: String, required: true },\r\n  Description: { type: String },\r\n  IpAddress: { type: String },\r\n  Status: { type: Boolean, default: false },\r\n  LastStatusWhen: { type: Date },\r\n  IsEnabled: { type: Boolean, default: true },\r\n}, { _id: false });\r\n\r\n// Platform Schema\r\nconst platformSchema = new mongoose.Schema({\r\n  PlatformNumber: { type: String, required: true },\r\n  PlatformType: { type: String },\r\n  Description: { type: String },\r\n  Subnet: { type: String },\r\n  Devices: { type: [deviceSchema], default: [] }\r\n}, { _id: false });\r\n\r\n// Main Schema\r\nconst platformDeviceSchema = new mongoose.Schema({\r\n  stationCode: { type: String, required: true, unique: true },\r\n  stationName: { type: String, required: true },\r\n  platforms: { type: [platformSchema], default: [] }\r\n}, { timestamps: true });\r\n\r\nconst PlatformDevice = mongoose.models.PlatformDevice || mongoose.model('PlatformDevice', platformDeviceSchema);\r\n\r\nexport default PlatformDevice;"],"names":[],"mappings":";;;AAAA;;AAEA,gBAAgB;AAChB,MAAM,eAAe,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,IAAI;QAAE,MAAM;QAAQ,UAAU;IAAK;IACnC,SAAS;QAAE,MAAM;QAAM,UAAU;IAAK;IACtC,SAAS;QAAE,MAAM;QAAM,UAAU;IAAK;IACtC,YAAY;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC3C,aAAa;QAAE,MAAM;IAAO;IAC5B,WAAW;QAAE,MAAM;IAAO;IAC1B,QAAQ;QAAE,MAAM;QAAS,SAAS;IAAM;IACxC,gBAAgB;QAAE,MAAM;IAAK;IAC7B,WAAW;QAAE,MAAM;QAAS,SAAS;IAAK;AAC5C,GAAG;IAAE,KAAK;AAAM;AAEhB,kBAAkB;AAClB,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACzC,gBAAgB;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC/C,cAAc;QAAE,MAAM;IAAO;IAC7B,aAAa;QAAE,MAAM;IAAO;IAC5B,QAAQ;QAAE,MAAM;IAAO;IACvB,SAAS;QAAE,MAAM;YAAC;SAAa;QAAE,SAAS,EAAE;IAAC;AAC/C,GAAG;IAAE,KAAK;AAAM;AAEhB,cAAc;AACd,MAAM,uBAAuB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC/C,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IAC1D,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,WAAW;QAAE,MAAM;YAAC;SAAe;QAAE,SAAS,EAAE;IAAC;AACnD,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,iBAAiB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,kBAAkB;uCAE3E","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/platforms-devices/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport dbConnect from '@/lib/dbConnect';\r\nimport PlatformDevice from '@/models/platformDeviceModel';\r\nimport mongoose from 'mongoose';\r\n\r\nexport const GET = async (_req: NextRequest) => {\r\n  try {\r\n    await dbConnect();\r\n    const data = await PlatformDevice.find().lean();\r\n    return NextResponse.json({ success: true, data });\r\n  } catch (err: any) {\r\n    console.error('GET error:', err.message, err.stack);\r\n    if (err instanceof mongoose.Error) {\r\n      return NextResponse.json({ success: false, message: `Database error: ${err.message}` }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ success: false, message: 'Server Error' }, { status: 500 });\r\n  }\r\n};\r\n\r\nexport const POST = async (req: NextRequest) => {\r\n  try {\r\n    await dbConnect();\r\n    const body = await req.json();\r\n    const { stationCode, stationName, platforms } = body;\r\n\r\n    if (!stationCode || !stationName || !Array.isArray(platforms)) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Invalid payload: stationCode, stationName, and platforms array are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate platforms and devices\r\n    for (const platform of platforms) {\r\n      if (!platform.PlatformNumber) {\r\n        return NextResponse.json({ success: false, message: 'PlatformNumber is required for each platform' }, { status: 400 });\r\n      }\r\n      if (platform.Devices) {\r\n        for (const device of platform.Devices) {\r\n          if (!device.Id || !device.Created || !device.Updated || !device.DeviceType) {\r\n            return NextResponse.json(\r\n              { success: false, message: 'Each device must have Id, Created, Updated, and DeviceType' },\r\n              { status: 400 }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const updated = await PlatformDevice.findOneAndUpdate(\r\n      { stationCode },\r\n      { stationName, platforms },\r\n      { new: true, upsert: true }\r\n    );\r\n\r\n    return NextResponse.json({ success: true, data: updated });\r\n  } catch (err: any) {\r\n    console.error('POST error:', err.message, err.stack);\r\n    if (err.code === 11000) {\r\n      return NextResponse.json({ success: false, message: 'Station code already exists' }, { status: 400 });\r\n    }\r\n    if (err instanceof mongoose.Error.ValidationError) {\r\n      return NextResponse.json({ success: false, message: `Validation error: ${err.message}` }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ success: false, message: 'Server Error' }, { status: 500 });\r\n  }\r\n};\r\n\r\nexport const PUT = async (req: NextRequest) => {\r\n  try {\r\n    await dbConnect();\r\n    const body = await req.json();\r\n    const { stationCode, platformNumber, updatedPlatformData } = body;\r\n\r\n    if (!stationCode || !platformNumber || typeof updatedPlatformData !== 'object') {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Invalid payload: stationCode, platformNumber, and updatedPlatformData are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const station = await PlatformDevice.findOne({ stationCode });\r\n    if (!station) {\r\n      return NextResponse.json({ success: false, message: 'Station not found' }, { status: 404 });\r\n    }\r\n\r\n    const platformIndex = station.platforms.findIndex(p => p.PlatformNumber === platformNumber);\r\n    if (platformIndex === -1) {\r\n      return NextResponse.json({ success: false, message: 'Platform not found' }, { status: 404 });\r\n    }\r\n\r\n    station.platforms[platformIndex] = {\r\n      ...station.platforms[platformIndex]._doc,\r\n      ...updatedPlatformData\r\n    };\r\n\r\n    await station.save();\r\n\r\n    return NextResponse.json({ success: true, data: station });\r\n  } catch (err: any) {\r\n    console.error('PUT error:', err.message, err.stack);\r\n    if (err instanceof mongoose.Error.ValidationError) {\r\n      return NextResponse.json({ success: false, message: `Validation error: ${err.message}` }, { status: 400 });\r\n    }\r\n    return NextResponse.json({ success: false, message: 'Server Error' }, { status: 500 });\r\n  }\r\n};\r\n\r\nexport const DELETE = async (req: NextRequest) => {\r\n  try {\r\n    await dbConnect();\r\n    const url = new URL(req.url);\r\n    const stationCode = url.searchParams.get('stationCode');\r\n    const platformNumber = url.searchParams.get('platformNumber');\r\n\r\n    if (!stationCode) {\r\n      return NextResponse.json({ success: false, message: 'stationCode is required' }, { status: 400 });\r\n    }\r\n\r\n    if (platformNumber) {\r\n      const station = await PlatformDevice.findOne({ stationCode });\r\n      if (!station) {\r\n        return NextResponse.json({ success: false, message: 'Station not found' }, { status: 404 });\r\n      }\r\n\r\n      const initialLength = station.platforms.length;\r\n      station.platforms = station.platforms.filter(p => p.PlatformNumber !== platformNumber);\r\n      if (station.platforms.length === initialLength) {\r\n        return NextResponse.json({ success: false, message: 'Platform not found' }, { status: 404 });\r\n      }\r\n      await station.save();\r\n\r\n      return NextResponse.json({ success: true, message: 'Platform deleted', data: station });\r\n    } else {\r\n      const deleted = await PlatformDevice.findOneAndDelete({ stationCode });\r\n      if (!deleted) {\r\n        return NextResponse.json({ success: false, message: 'Station not found' }, { status: 404 });\r\n      }\r\n      return NextResponse.json({ success: true, message: 'Station deleted', data: deleted });\r\n    }\r\n  } catch (err: any) {\r\n    console.error('DELETE error:', err.message, err.stack);\r\n    if (err instanceof mongoose.Error) {\r\n      return NextResponse.json({ success: false, message: `Database error: ${err.message}` }, { status: 500 });\r\n    }\r\n    return NextResponse.json({ success: false, message: 'Server Error' }, { status: 500 });\r\n  }\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}