{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport bcrypt from 'bcryptjs';\r\nimport connectDB from '@/lib/mongodb';\r\nimport User from '@/models/userModel';\r\nimport { sendEmail } from '@/helpers/mailer';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { fullName, email, password, confirmPassword } = await req.json();\r\n\r\n    if (!fullName || !email || !password || !confirmPassword) {\r\n      return NextResponse.json({ message: 'All fields are required.' }, { status: 400 });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return NextResponse.json({ message: 'Passwords do not match.' }, { status: 400 });\r\n    }\r\n\r\n    await connectDB();\r\n\r\n    const userExists = await User.findOne({ email });\r\n    if (userExists) {\r\n      return NextResponse.json({ message: 'User already exists.' }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newUser = new User({\r\n      fullName,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    await sendEmail({ email, emailType: 'VERIFY', userId: newUser._id });\r\n\r\n    return NextResponse.json({ message: 'User registered successfully.' }, { status: 201 });\r\n  } catch (error: any) {\r\n    return NextResponse.json({ message: 'Something went wrong.', error }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AAKO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,IAAI;QAErE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAiB;YACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,IAAI,aAAa,iBAAiB;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,MAAM;QAEN,MAAM,aAAa,MAAM,KAAK,OAAO,CAAC;YAAE;QAAM;QAC9C,IAAI,YAAY;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,MAAM,UAAU,IAAI,KAAK;YACvB;YACA;YACA,UAAU;QACZ;QAEA,MAAM,QAAQ,IAAI;QAElB,MAAM,UAAU;YAAE;YAAO,WAAW;YAAU,QAAQ,QAAQ,GAAG;QAAC;QAElE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB;QAAM,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}