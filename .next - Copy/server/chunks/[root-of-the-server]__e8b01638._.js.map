{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/station.ts"],"sourcesContent":["// models/station.ts\r\n\r\nimport mongoose, { Schema, model, models } from 'mongoose';\r\n\r\nconst StationSchema = new Schema({\r\n  StationCode: { type: String, required: true, unique: true },\r\n  RegionalLanguage: { type: String, required: true },\r\n  StationNameEnglish: { type: String, required: true },\r\n  StationNameHindi: { type: String, required: true },\r\n  StationNameRegional: { type: String, required: true },\r\n  Latitude: Number,\r\n  Longitude: Number,\r\n  Altitude: Number,\r\n  NumberOfPlatforms: Number,\r\n  NumberOfSplPlatforms: Number,\r\n  NumberOfStationEntrances: Number,\r\n  NumberOfPlatformBridges: Number,\r\n}, {\r\n  timestamps: true,\r\n});\r\n\r\nexport const Station = models.Station || model(\"Station\", StationSchema);\r\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;AAEpB;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC/B,aAAa;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IAC1D,kBAAkB;QAAE,MAAM;QAAQ,UAAU;IAAK;IACjD,oBAAoB;QAAE,MAAM;QAAQ,UAAU;IAAK;IACnD,kBAAkB;QAAE,MAAM;QAAQ,UAAU;IAAK;IACjD,qBAAqB;QAAE,MAAM;QAAQ,UAAU;IAAK;IACpD,UAAU;IACV,WAAW;IACX,UAAU;IACV,mBAAmB;IACnB,sBAAsB;IACtB,0BAA0B;IAC1B,yBAAyB;AAC3B,GAAG;IACD,YAAY;AACd;AAEO,MAAM,UAAU,yGAAA,CAAA,SAAM,CAAC,OAAO,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,WAAW","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/station-info/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport mongoose from 'mongoose';\r\nimport { Station } from '@/models/station';\r\n\r\nconst connectToDB = async () => {\r\n  if (mongoose.connection.readyState === 0) {\r\n    await mongoose.connect(process.env.MONGODB_URI as string, {\r\n      dbName: 'rms',\r\n    });\r\n  }\r\n};\r\n\r\n// POST: Add a new station\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await connectToDB();\r\n\r\n    const body = await req.json();\r\n\r\n    const requiredFields = [\r\n      'StationCode',\r\n      'RegionalLanguage',\r\n      'StationNameEnglish',\r\n      'StationNameHindi',\r\n      'StationNameRegional',\r\n    ];\r\n\r\n    for (const field of requiredFields) {\r\n      if (!body[field]) {\r\n        return NextResponse.json({ error: `${field} is required` }, { status: 400 });\r\n      }\r\n    }\r\n\r\n    const existingStation = await Station.findOne({ StationCode: body.StationCode });\r\n    if (existingStation) {\r\n      return NextResponse.json({ error: 'Station with this code already exists' }, { status: 409 });\r\n    }\r\n\r\n    const newStation = new Station(body);\r\n    await newStation.save();\r\n\r\n    return NextResponse.json({ message: 'Station added successfully' }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('POST /station-info error:', error);\r\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// GET: Fetch all stations\r\nexport async function GET() {\r\n  try {\r\n    await connectToDB();\r\n\r\n    const stations = await Station.find().sort({ createdAt: -1 });\r\n\r\n    return NextResponse.json({ success: true, data: stations }, { status: 200 });\r\n  } catch (error) {\r\n    console.error('GET /station-info error:', error);\r\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,cAAc;IAClB,IAAI,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,GAAG;QACxC,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY;YACxD,QAAQ;QACV;IACF;AACF;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM;QAEN,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,iBAAiB;YACrB;YACA;YACA;YACA;YACA;SACD;QAED,KAAK,MAAM,SAAS,eAAgB;YAClC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO,GAAG,MAAM,YAAY,CAAC;gBAAC,GAAG;oBAAE,QAAQ;gBAAI;YAC5E;QACF;QAEA,MAAM,kBAAkB,MAAM,mHAAA,CAAA,UAAO,CAAC,OAAO,CAAC;YAAE,aAAa,KAAK,WAAW;QAAC;QAC9E,IAAI,iBAAiB;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAwC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QAEA,MAAM,aAAa,IAAI,mHAAA,CAAA,UAAO,CAAC;QAC/B,MAAM,WAAW,IAAI;QAErB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6B,GAAG;YAAE,QAAQ;QAAI;IACpF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QAEN,MAAM,WAAW,MAAM,mHAAA,CAAA,UAAO,CAAC,IAAI,GAAG,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAS,GAAG;YAAE,QAAQ;QAAI;IAC5E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}