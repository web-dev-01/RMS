{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/models/eventLogModel.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\n\r\nexport interface IEventLog extends Document {\r\n  Timestamp: Date;\r\n  EventID: number;\r\n  EventType: 'Information' | 'Warning' | 'Error' | 'Critical';\r\n  Source: string;\r\n  Description: string;\r\n  IsSentToServer: boolean;\r\n}\r\n\r\nconst EventLogSchema = new Schema<IEventLog>({\r\n  Timestamp: { type: Date, required: true },\r\n  EventID: { type: Number, required: true },\r\n  EventType: {\r\n    type: String,\r\n    enum: ['Information', 'Warning', 'Error', 'Critical'],\r\n    required: true\r\n  },\r\n  Source: { type: String, required: true },\r\n  Description: { type: String, required: true },\r\n  IsSentToServer: { type: Boolean, required: true }\r\n});\r\n\r\nexport const EventLog = mongoose.models.EventLog || mongoose.model<IEventLog>('EventLog', EventLogSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAWA,MAAM,iBAAiB,IAAI,yGAAA,CAAA,SAAM,CAAY;IAC3C,WAAW;QAAE,MAAM;QAAM,UAAU;IAAK;IACxC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,WAAW;QACT,MAAM;QACN,MAAM;YAAC;YAAe;YAAW;YAAS;SAAW;QACrD,UAAU;IACZ;IACA,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,gBAAgB;QAAE,MAAM;QAAS,UAAU;IAAK;AAClD;AAEO,MAAM,WAAW,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAY,YAAY","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/api/rms/event-logs/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport mongoose from 'mongoose';\r\nimport { EventLog } from '@/models/eventLogModel';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || '';\r\n\r\n// ✅ Connect to MongoDB only if not connected\r\nasync function connectToDB() {\r\n  if (mongoose.connection.readyState === 0) {\r\n    await mongoose.connect(MONGODB_URI, {\r\n      dbName: 'rms',\r\n    });\r\n  }\r\n}\r\n\r\n// ✅ GET all logs: /api/rms/event-logs\r\nexport async function GET() {\r\n  try {\r\n    await connectToDB();\r\n    const logs = await EventLog.find().sort({ Timestamp: -1 }); // Most recent first\r\n    return NextResponse.json({ success: true, data: logs }, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to fetch event logs.', error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ POST new log: /api/rms/event-logs\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const body = await req.json();\r\n\r\n    // Validate required fields here if needed\r\n\r\n    const newLog = await EventLog.create({\r\n      ...body,\r\n      Timestamp: new Date(), // Ensure timestamp is set\r\n    });\r\n\r\n    return NextResponse.json({ success: true, data: newLog }, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to create event log.', error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ PUT to update a log (by ID): expects { id, ...updates }\r\nexport async function PUT(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const { id, ...updates } = await req.json();\r\n\r\n    if (!id) {\r\n      return NextResponse.json({ success: false, message: 'Missing log ID.' }, { status: 400 });\r\n    }\r\n\r\n    const updated = await EventLog.findByIdAndUpdate(id, updates, {\r\n      new: true,\r\n      runValidators: true,\r\n    });\r\n\r\n    if (!updated) {\r\n      return NextResponse.json({ success: false, message: 'Event log not found.' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ success: true, data: updated }, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to update event log.', error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ DELETE a log by ID: expects { id }\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    await connectToDB();\r\n    const { id } = await req.json();\r\n\r\n    if (!id) {\r\n      return NextResponse.json({ success: false, message: 'Missing log ID.' }, { status: 400 });\r\n    }\r\n\r\n    const deleted = await EventLog.findByIdAndDelete(id);\r\n\r\n    if (!deleted) {\r\n      return NextResponse.json({ success: false, message: 'Event log not found.' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ success: true, message: 'Event log deleted successfully.' }, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { success: false, message: 'Failed to delete event log.', error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}