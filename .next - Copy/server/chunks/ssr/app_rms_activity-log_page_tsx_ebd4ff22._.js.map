{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/rms/activity-log/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Box,\r\n  CircularProgress,\r\n  TextField,\r\n  MenuItem,\r\n  InputAdornment,\r\n  IconButton,\r\n  Pagination,\r\n  Stack,\r\n  Divider,\r\n  Chip,\r\n} from '@mui/material';\r\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\ninterface LogEntry {\r\n  id: number;\r\n  timestamp: string;\r\n  user: string;\r\n  action: string;\r\n  status: string;\r\n}\r\n\r\nexport default function ActivityLogPage() {\r\n  const [logs, setLogs] = useState<LogEntry[]>([]);\r\n  const [filteredLogs, setFilteredLogs] = useState<LogEntry[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('All');\r\n  const [userFilter, setUserFilter] = useState('All');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const rowsPerPage = 5;\r\n\r\n  const uniqueUsers = useMemo(() => {\r\n    const users = logs.map(log => log.user);\r\n    return ['All', ...Array.from(new Set(users))];\r\n  }, [logs]);\r\n\r\n  const handleSearch = (value: string) => {\r\n    setSearchTerm(value.toLowerCase());\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleStatusFilter = (value: string) => {\r\n    setStatusFilter(value);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleUserFilter = (value: string) => {\r\n    setUserFilter(value);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const fetchLogs = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await fetch('/api/activity-log');\r\n      const data = await res.json();\r\n      setLogs(data);\r\n    } catch (err) {\r\n      console.error('Error loading logs:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLogs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let filtered = [...logs];\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(\r\n        log =>\r\n          log.user.toLowerCase().includes(searchTerm) ||\r\n          log.action.toLowerCase().includes(searchTerm) ||\r\n          log.status.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    if (statusFilter !== 'All') {\r\n      filtered = filtered.filter(log => log.status === statusFilter);\r\n    }\r\n\r\n    if (userFilter !== 'All') {\r\n      filtered = filtered.filter(log => log.user === userFilter);\r\n    }\r\n\r\n    setFilteredLogs(filtered);\r\n  }, [logs, searchTerm, statusFilter, userFilter]);\r\n\r\n  const columns: GridColDef[] = [\r\n    { field: 'timestamp', headerName: 'Timestamp', flex: 1, minWidth: 150 },\r\n    { field: 'user', headerName: 'User', flex: 1 },\r\n    { field: 'action', headerName: 'Action', flex: 2 },\r\n    {\r\n      field: 'status',\r\n      headerName: 'Status',\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <Chip\r\n          label={params.value}\r\n          color={\r\n            params.value === 'Success'\r\n              ? 'success'\r\n              : params.value === 'Failed'\r\n              ? 'error'\r\n              : 'default'\r\n          }\r\n          size=\"small\"\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const paginatedLogs = useMemo(() => {\r\n    const start = (currentPage - 1) * rowsPerPage;\r\n    return filteredLogs.slice(start, start + rowsPerPage);\r\n  }, [filteredLogs, currentPage]);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 6 }}>\r\n      <Paper elevation={3} sx={{ p: 4 }}>\r\n        <Typography variant=\"h5\" fontWeight=\"bold\" gutterBottom>\r\n          Activity Logs\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n          View system-wide actions and events across the portal. Use filters or search to narrow down logs.\r\n        </Typography>\r\n\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            gap: 2,\r\n            mt: 3,\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Search\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            fullWidth\r\n            sx={{ maxWidth: 300 }}\r\n            value={searchTerm}\r\n            onChange={(e) => handleSearch(e.target.value)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton size=\"small\" onClick={() => handleSearch('')}>\r\n                    {searchTerm ? <ClearIcon /> : <SearchIcon />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          <TextField\r\n            select\r\n            label=\"Status\"\r\n            size=\"small\"\r\n            value={statusFilter}\r\n            onChange={(e) => handleStatusFilter(e.target.value)}\r\n            sx={{ minWidth: 150 }}\r\n          >\r\n            {['All', 'Success', 'Failed', 'Pending'].map((status) => (\r\n              <MenuItem key={status} value={status}>\r\n                {status}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n\r\n          <TextField\r\n            select\r\n            label=\"User\"\r\n            size=\"small\"\r\n            value={userFilter}\r\n            onChange={(e) => handleUserFilter(e.target.value)}\r\n            sx={{ minWidth: 150 }}\r\n          >\r\n            {uniqueUsers.map((user) => (\r\n              <MenuItem key={user} value={user}>\r\n                {user}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n\r\n          <IconButton onClick={fetchLogs} size=\"small\">\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        </Box>\r\n\r\n        <Divider sx={{ my: 3 }} />\r\n\r\n        {loading ? (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 6 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <Box sx={{ height: 400, width: '100%' }}>\r\n            <DataGrid\r\n              rows={paginatedLogs}\r\n              columns={columns}\r\n              disableRowSelectionOnClick\r\n              hideFooter\r\n              rowHeight={42}\r\n              autoHeight\r\n            />\r\n          </Box>\r\n        )}\r\n\r\n        <Stack spacing={2} alignItems=\"center\" sx={{ mt: 3 }}>\r\n          <Pagination\r\n            count={Math.ceil(filteredLogs.length / rowsPerPage)}\r\n            page={currentPage}\r\n            onChange={(_, val) => setCurrentPage(val)}\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            showFirstButton\r\n            showLastButton\r\n          />\r\n        </Stack>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AArBA;;;;;;;;AA+Be,SAAS;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IAC/D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,cAAc;IAEpB,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC1B,MAAM,QAAQ,KAAK,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI;QACtC,OAAO;YAAC;eAAU,MAAM,IAAI,CAAC,IAAI,IAAI;SAAQ;IAC/C,GAAG;QAAC;KAAK;IAET,MAAM,eAAe,CAAC;QACpB,cAAc,MAAM,WAAW;QAC/B,eAAe;IACjB;IAEA,MAAM,qBAAqB,CAAC;QAC1B,gBAAgB;QAChB,eAAe;IACjB;IAEA,MAAM,mBAAmB,CAAC;QACxB,cAAc;QACd,eAAe;IACjB;IAEA,MAAM,YAAY;QAChB,IAAI;YACF,WAAW;YACX,MAAM,MAAM,MAAM,MAAM;YACxB,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,QAAQ;QACV,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,uBAAuB;QACvC,SAAU;YACR,WAAW;QACb;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,WAAW;eAAI;SAAK;QAExB,IAAI,YAAY;YACd,WAAW,SAAS,MAAM,CACxB,CAAA,MACE,IAAI,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,eAChC,IAAI,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,eAClC,IAAI,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;QAExC;QAEA,IAAI,iBAAiB,OAAO;YAC1B,WAAW,SAAS,MAAM,CAAC,CAAA,MAAO,IAAI,MAAM,KAAK;QACnD;QAEA,IAAI,eAAe,OAAO;YACxB,WAAW,SAAS,MAAM,CAAC,CAAA,MAAO,IAAI,IAAI,KAAK;QACjD;QAEA,gBAAgB;IAClB,GAAG;QAAC;QAAM;QAAY;QAAc;KAAW;IAE/C,MAAM,UAAwB;QAC5B;YAAE,OAAO;YAAa,YAAY;YAAa,MAAM;YAAG,UAAU;QAAI;QACtE;YAAE,OAAO;YAAQ,YAAY;YAAQ,MAAM;QAAE;QAC7C;YAAE,OAAO;YAAU,YAAY;YAAU,MAAM;QAAE;QACjD;YACE,OAAO;YACP,YAAY;YACZ,MAAM;YACN,YAAY,CAAC,uBACX,8OAAC,2LAAA,CAAA,OAAI;oBACH,OAAO,OAAO,KAAK;oBACnB,OACE,OAAO,KAAK,KAAK,YACb,YACA,OAAO,KAAK,KAAK,WACjB,UACA;oBAEN,MAAK;;;;;;QAGX;KACD;IAED,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC5B,MAAM,QAAQ,CAAC,cAAc,CAAC,IAAI;QAClC,OAAO,aAAa,KAAK,CAAC,OAAO,QAAQ;IAC3C,GAAG;QAAC;QAAc;KAAY;IAE9B,qBACE,8OAAC,0MAAA,CAAA,YAAS;QAAC,UAAS;QAAK,IAAI;YAAE,IAAI;QAAE;kBACnC,cAAA,8OAAC,8LAAA,CAAA,QAAK;YAAC,WAAW;YAAG,IAAI;gBAAE,GAAG;YAAE;;8BAC9B,8OAAC,6MAAA,CAAA,aAAU;oBAAC,SAAQ;oBAAK,YAAW;oBAAO,YAAY;8BAAC;;;;;;8BAGxD,8OAAC,6MAAA,CAAA,aAAU;oBAAC,SAAQ;oBAAQ,OAAM;oBAAiB,YAAY;8BAAC;;;;;;8BAIhE,8OAAC,wLAAA,CAAA,MAAG;oBACF,IAAI;wBACF,SAAS;wBACT,KAAK;wBACL,IAAI;wBACJ,UAAU;wBACV,gBAAgB;wBAChB,YAAY;oBACd;;sCAEA,8OAAC,0MAAA,CAAA,YAAS;4BACR,OAAM;4BACN,SAAQ;4BACR,MAAK;4BACL,SAAS;4BACT,IAAI;gCAAE,UAAU;4BAAI;4BACpB,OAAO;4BACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;4BAC5C,YAAY;gCACV,4BACE,8OAAC,yNAAA,CAAA,iBAAc;oCAAC,UAAS;8CACvB,cAAA,8OAAC,6MAAA,CAAA,aAAU;wCAAC,MAAK;wCAAQ,SAAS,IAAM,aAAa;kDAClD,2BAAa,8OAAC,0JAAA,CAAA,UAAS;;;;mEAAM,8OAAC,2JAAA,CAAA,UAAU;;;;;;;;;;;;;;;4BAIjD;;;;;;sCAGF,8OAAC,0MAAA,CAAA,YAAS;4BACR,MAAM;4BACN,OAAM;4BACN,MAAK;4BACL,OAAO;4BACP,UAAU,CAAC,IAAM,mBAAmB,EAAE,MAAM,CAAC,KAAK;4BAClD,IAAI;gCAAE,UAAU;4BAAI;sCAEnB;gCAAC;gCAAO;gCAAW;gCAAU;6BAAU,CAAC,GAAG,CAAC,CAAC,uBAC5C,8OAAC,uMAAA,CAAA,WAAQ;oCAAc,OAAO;8CAC3B;mCADY;;;;;;;;;;sCAMnB,8OAAC,0MAAA,CAAA,YAAS;4BACR,MAAM;4BACN,OAAM;4BACN,MAAK;4BACL,OAAO;4BACP,UAAU,CAAC,IAAM,iBAAiB,EAAE,MAAM,CAAC,KAAK;4BAChD,IAAI;gCAAE,UAAU;4BAAI;sCAEnB,YAAY,GAAG,CAAC,CAAC,qBAChB,8OAAC,uMAAA,CAAA,WAAQ;oCAAY,OAAO;8CACzB;mCADY;;;;;;;;;;sCAMnB,8OAAC,6MAAA,CAAA,aAAU;4BAAC,SAAS;4BAAW,MAAK;sCACnC,cAAA,8OAAC,4JAAA,CAAA,UAAW;;;;;;;;;;;;;;;;8BAIhB,8OAAC,oMAAA,CAAA,UAAO;oBAAC,IAAI;wBAAE,IAAI;oBAAE;;;;;;gBAEpB,wBACC,8OAAC,wLAAA,CAAA,MAAG;oBAAC,IAAI;wBAAE,SAAS;wBAAQ,gBAAgB;wBAAU,IAAI;oBAAE;8BAC1D,cAAA,8OAAC,+NAAA,CAAA,mBAAgB;;;;;;;;;yCAGnB,8OAAC,wLAAA,CAAA,MAAG;oBAAC,IAAI;wBAAE,QAAQ;wBAAK,OAAO;oBAAO;8BACpC,cAAA,8OAAC,yKAAA,CAAA,WAAQ;wBACP,MAAM;wBACN,SAAS;wBACT,0BAA0B;wBAC1B,UAAU;wBACV,WAAW;wBACX,UAAU;;;;;;;;;;;8BAKhB,8OAAC,8LAAA,CAAA,QAAK;oBAAC,SAAS;oBAAG,YAAW;oBAAS,IAAI;wBAAE,IAAI;oBAAE;8BACjD,cAAA,8OAAC,6MAAA,CAAA,aAAU;wBACT,OAAO,KAAK,IAAI,CAAC,aAAa,MAAM,GAAG;wBACvC,MAAM;wBACN,UAAU,CAAC,GAAG,MAAQ,eAAe;wBACrC,OAAM;wBACN,MAAK;wBACL,eAAe;wBACf,cAAc;;;;;;;;;;;;;;;;;;;;;;AAM1B","debugId":null}}]
}