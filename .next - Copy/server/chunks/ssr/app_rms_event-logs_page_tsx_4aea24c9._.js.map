{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/rms/event-logs/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  CircularProgress,\r\n  Alert,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Chip,\r\n} from '@mui/material';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\n// Define interface for event log data\r\ninterface EventLog {\r\n  _id?: string;\r\n  EventID: number;\r\n  EventType: 'Information' | 'Warning' | 'Error' | 'Critical';\r\n  Source: string;\r\n  Description: string;\r\n  Timestamp: string;\r\n  IsSentToServer: boolean;\r\n}\r\n\r\nexport default function EventLogsPage() {\r\n  // State for logs, loading, error, and selected log for dialog\r\n  const [logs, setLogs] = useState<EventLog[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>('');\r\n  const [selectedLog, setSelectedLog] = useState<EventLog | null>(null);\r\n\r\n  // Define color scheme to match PlatformsDevicesPage\r\n  const primaryColor = '#00ED64'; // MongoDB green\r\n  const secondaryColor = '#0A0F19'; // Dark navy\r\n\r\n  // Fetch event logs from API\r\n  const fetchLogs = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const res = await fetch('/api/rms/event-logs');\r\n      if (!res.ok) {\r\n        throw new Error(`HTTP error ${res.status}`);\r\n      }\r\n      const data = await res.json();\r\n      // Ensure logs is an array to prevent undefined errors\r\n      setLogs(Array.isArray(data?.data) ? data.data : []);\r\n    } catch (err: any) {\r\n      console.error('Fetch error:', err);\r\n      setError('Failed to fetch event logs');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch logs on component mount\r\n  useEffect(() => {\r\n    fetchLogs();\r\n  }, []);\r\n\r\n  // Handle click on a log row to show details in dialog\r\n  const handleLogClick = (log: EventLog) => {\r\n    setSelectedLog(log);\r\n  };\r\n\r\n  // Close the log details dialog\r\n  const handleCloseDialog = () => {\r\n    setSelectedLog(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 4, bgcolor: secondaryColor, minHeight: '100vh' }}>\r\n      {/* Header with title and refresh button */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\r\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: primaryColor }}>\r\n          Event Logs\r\n        </Typography>\r\n        <Tooltip title=\"Refresh Logs\">\r\n          <IconButton\r\n            onClick={fetchLogs}\r\n            sx={{ color: primaryColor, '&:hover': { bgcolor: '#00ED6420' } }}\r\n          >\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n\r\n      {/* Main content */}\r\n      <Paper\r\n        elevation={3}\r\n        sx={{\r\n          p: 3,\r\n          bgcolor: '#0A0F19CC',\r\n          borderRadius: 2,\r\n          '&:hover': { boxShadow: `0 4px 20px ${primaryColor}33` },\r\n          transition: 'box-shadow 0.3s',\r\n        }}\r\n      >\r\n        {loading ? (\r\n          // Show loading spinner during fetch\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\r\n            <CircularProgress size={60} sx={{ color: primaryColor }} />\r\n          </Box>\r\n        ) : error ? (\r\n          // Show error message if fetch fails\r\n          <Alert\r\n            severity=\"error\"\r\n            sx={{ borderRadius: 2, bgcolor: secondaryColor, color: primaryColor }}\r\n          >\r\n            {error}\r\n          </Alert>\r\n        ) : logs.length === 0 ? (\r\n          // Show info message if no logs exist\r\n          <Alert\r\n            severity=\"info\"\r\n            sx={{ borderRadius: 2, bgcolor: secondaryColor, color: primaryColor }}\r\n          >\r\n            No logs found.\r\n          </Alert>\r\n        ) : (\r\n          // Display logs in a clickable table\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ color: primaryColor, fontWeight: 'bold' }}>Event ID</TableCell>\r\n                <TableCell sx={{ color: primaryColor, fontWeight: 'bold' }}>Type</TableCell>\r\n                <TableCell sx={{ color: primaryColor, fontWeight: 'bold' }}>Source</TableCell>\r\n                <TableCell sx={{ color: primaryColor, fontWeight: 'bold' }}>Description</TableCell>\r\n                <TableCell sx={{ color: primaryColor, fontWeight: 'bold' }}>Time</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {logs.map((log) => (\r\n                <TableRow\r\n                  key={log._id || log.EventID}\r\n                  onClick={() => handleLogClick(log)}\r\n                  sx={{\r\n                    cursor: 'pointer',\r\n                    '&:hover': { bgcolor: '#00ED6420' },\r\n                    transition: 'background-color 0.2s',\r\n                  }}\r\n                >\r\n                  <TableCell sx={{ color: primaryColor }}>{log.EventID}</TableCell>\r\n                  <TableCell sx={{ color: primaryColor }}>{log.EventType || 'N/A'}</TableCell>\r\n                  <TableCell sx={{ color: primaryColor }}>{log.Source || 'N/A'}</TableCell>\r\n                  <TableCell sx={{ color: primaryColor }}>{log.Description || 'N/A'}</TableCell>\r\n                  <TableCell sx={{ color: primaryColor }}>\r\n                    {log.Timestamp\r\n                      ? formatDistanceToNow(new Date(log.Timestamp), { addSuffix: true })\r\n                      : 'N/A'}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        )}\r\n      </Paper>\r\n\r\n      {/* Dialog for log details */}\r\n      <Dialog\r\n        open={!!selectedLog}\r\n        onClose={handleCloseDialog}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n        sx={{ '& .MuiDialog-paper': { borderRadius: 2, bgcolor: secondaryColor } }}\r\n      >\r\n        <DialogTitle sx={{ bgcolor: '#00ED6420', color: primaryColor, fontWeight: 'medium' }}>\r\n          Event Log Details\r\n        </DialogTitle>\r\n        <DialogContent dividers sx={{ bgcolor: secondaryColor }}>\r\n          {selectedLog && (\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Event ID:</strong> {selectedLog.EventID}\r\n              </Typography>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Type:</strong> {selectedLog.EventType || 'N/A'}\r\n              </Typography>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Source:</strong> {selectedLog.Source || 'N/A'}\r\n              </Typography>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Description:</strong> {selectedLog.Description || 'N/A'}\r\n              </Typography>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Timestamp:</strong>{' '}\r\n                {selectedLog.Timestamp\r\n                  ? new Date(selectedLog.Timestamp).toLocaleString()\r\n                  : 'N/A'}\r\n              </Typography>\r\n              <Typography sx={{ color: primaryColor }}>\r\n                <strong>Sent to Server:</strong>{' '}\r\n                <Chip\r\n                  label={selectedLog.IsSentToServer ? 'Yes' : 'No'}\r\n                  sx={{\r\n                    bgcolor: selectedLog.IsSentToServer ? primaryColor : '#999999',\r\n                    color: secondaryColor,\r\n                  }}\r\n                  size=\"small\"\r\n                />\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions sx={{ bgcolor: '#0A0F19CC' }}>\r\n          <Button\r\n            onClick={handleCloseDialog}\r\n            variant=\"contained\"\r\n            sx={{ bgcolor: primaryColor, color: secondaryColor, '&:hover': { bgcolor: '#00CC55' } }}\r\n          >\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}