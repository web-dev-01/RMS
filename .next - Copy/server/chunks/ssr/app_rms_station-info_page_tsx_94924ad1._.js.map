{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/offic/OneDrive/Documents/PROJECTS%20LIVE%20NOW/your-portal/app/rms/station-info/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  CircularProgress,\r\n  Alert,\r\n  Box,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { StationDataType } from '@/types/station'; // optional type import\r\n\r\nconst dummyData: StationDataType[] = [\r\n  {\r\n    _id: '1',\r\n    StationCode: 'NDLS',\r\n    StationNameEnglish: 'New Delhi',\r\n    StationNameHindi: 'नई दिल्ली',\r\n    StationNameRegional: 'ਨਵੀਂ ਦਿੱਲੀ',\r\n    RegionalLanguage: 'Punjabi',\r\n    Latitude: 28.6139,\r\n    Longitude: 77.209,\r\n    Altitude: 216,\r\n    NumberOfPlatforms: 16,\r\n    NumberOfSplPlatforms: 2,\r\n    NumberOfStationEntrances: 4,\r\n    NumberOfPlatformBridges: 3,\r\n  },\r\n  {\r\n    _id: '2',\r\n    StationCode: 'CSMT',\r\n    StationNameEnglish: 'Chhatrapati Shivaji Maharaj Terminus',\r\n    StationNameHindi: 'छत्रपति शिवाजी महाराज टर्मिनस',\r\n    StationNameRegional: 'छत्रपति शिवाजी महाराज टर्मिनस',\r\n    RegionalLanguage: 'Marathi',\r\n    Latitude: 18.9402,\r\n    Longitude: 72.8358,\r\n    Altitude: 7,\r\n    NumberOfPlatforms: 18,\r\n    NumberOfSplPlatforms: 1,\r\n    NumberOfStationEntrances: 5,\r\n    NumberOfPlatformBridges: 4,\r\n  },\r\n];\r\n\r\nexport default function StationListPage() {\r\n  const [stations, setStations] = useState<StationDataType[]>([]);\r\n  const [filteredStations, setFilteredStations] = useState<StationDataType[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const fetchStations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await fetch('/api/rms/station');\r\n      if (!res.ok) throw new Error('Failed to fetch stations');\r\n      const data = await res.json();\r\n      setStations(data);\r\n      setFilteredStations(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('API error:', err);\r\n      setError('Failed to fetch station data. Showing dummy data.');\r\n      setStations(dummyData);\r\n      setFilteredStations(dummyData);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStations();\r\n  }, []);\r\n\r\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const term = e.target.value.toLowerCase();\r\n    setSearchTerm(term);\r\n    const filtered = stations.filter(\r\n      (station) =>\r\n        station.StationCode.toLowerCase().includes(term) ||\r\n        station.StationNameEnglish.toLowerCase().includes(term) ||\r\n        station.RegionalLanguage.toLowerCase().includes(term)\r\n    );\r\n    setFilteredStations(filtered);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Station Information\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          placeholder=\"Search by Station Code, Name or Language\"\r\n          fullWidth\r\n          value={searchTerm}\r\n          onChange={handleSearch}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            ),\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={fetchStations}>\r\n                  <RefreshIcon />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <Paper sx={{ overflow: 'auto' }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Station Code</TableCell>\r\n                <TableCell>English Name</TableCell>\r\n                <TableCell>Hindi Name</TableCell>\r\n                <TableCell>Regional Name</TableCell>\r\n                <TableCell>Regional Language</TableCell>\r\n                <TableCell>Latitude</TableCell>\r\n                <TableCell>Longitude</TableCell>\r\n                <TableCell>Altitude</TableCell>\r\n                <TableCell>#Platforms</TableCell>\r\n                <TableCell>#Spl Platforms</TableCell>\r\n                <TableCell>#Entrances</TableCell>\r\n                <TableCell>#Bridges</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredStations.map((station) => (\r\n                <TableRow key={station._id}>\r\n                  <TableCell>{station.StationCode}</TableCell>\r\n                  <TableCell>{station.StationNameEnglish}</TableCell>\r\n                  <TableCell>{station.StationNameHindi}</TableCell>\r\n                  <TableCell>{station.StationNameRegional}</TableCell>\r\n                  <TableCell>{station.RegionalLanguage}</TableCell>\r\n                  <TableCell>{station.Latitude}</TableCell>\r\n                  <TableCell>{station.Longitude}</TableCell>\r\n                  <TableCell>{station.Altitude}</TableCell>\r\n                  <TableCell>{station.NumberOfPlatforms}</TableCell>\r\n                  <TableCell>{station.NumberOfSplPlatforms}</TableCell>\r\n                  <TableCell>{station.NumberOfStationEntrances}</TableCell>\r\n                  <TableCell>{station.NumberOfPlatformBridges}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AApBA;;;;;;AAuBA,MAAM,YAA+B;IACnC;QACE,KAAK;QACL,aAAa;QACb,oBAAoB;QACpB,kBAAkB;QAClB,qBAAqB;QACrB,kBAAkB;QAClB,UAAU;QACV,WAAW;QACX,UAAU;QACV,mBAAmB;QACnB,sBAAsB;QACtB,0BAA0B;QAC1B,yBAAyB;IAC3B;IACA;QACE,KAAK;QACL,aAAa;QACb,oBAAoB;QACpB,kBAAkB;QAClB,qBAAqB;QACrB,kBAAkB;QAClB,UAAU;QACV,WAAW;QACX,UAAU;QACV,mBAAmB;QACnB,sBAAsB;QACtB,0BAA0B;QAC1B,yBAAyB;IAC3B;CACD;AAEc,SAAS;IACtB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB,EAAE;IAC9D,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB,EAAE;IAC9E,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,gBAAgB;QACpB,IAAI;YACF,WAAW;YACX,MAAM,MAAM,MAAM,MAAM;YACxB,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;YAC7B,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,YAAY;YACZ,oBAAoB;YACpB,SAAS;QACX,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,cAAc;YAC5B,SAAS;YACT,YAAY;YACZ,oBAAoB;QACtB,SAAU;YACR,WAAW;QACb;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,eAAe,CAAC;QACpB,MAAM,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,WAAW;QACvC,cAAc;QACd,MAAM,WAAW,SAAS,MAAM,CAC9B,CAAC,UACC,QAAQ,WAAW,CAAC,WAAW,GAAG,QAAQ,CAAC,SAC3C,QAAQ,kBAAkB,CAAC,WAAW,GAAG,QAAQ,CAAC,SAClD,QAAQ,gBAAgB,CAAC,WAAW,GAAG,QAAQ,CAAC;QAEpD,oBAAoB;IACtB;IAEA,qBACE,8OAAC,0MAAA,CAAA,YAAS;QAAC,UAAS;QAAK,IAAI;YAAE,IAAI;YAAG,IAAI;QAAE;;0BAC1C,8OAAC,6MAAA,CAAA,aAAU;gBAAC,SAAQ;gBAAK,YAAY;0BAAC;;;;;;YAIrC,uBACC,8OAAC,8LAAA,CAAA,QAAK;gBAAC,UAAS;gBAAQ,IAAI;oBAAE,IAAI;gBAAE;0BACjC;;;;;;0BAIL,8OAAC,wLAAA,CAAA,MAAG;gBAAC,IAAI;oBAAE,SAAS;oBAAQ,YAAY;oBAAU,IAAI;gBAAE;0BACtD,cAAA,8OAAC,0MAAA,CAAA,YAAS;oBACR,SAAQ;oBACR,aAAY;oBACZ,SAAS;oBACT,OAAO;oBACP,UAAU;oBACV,YAAY;wBACV,8BACE,8OAAC,yNAAA,CAAA,iBAAc;4BAAC,UAAS;sCACvB,cAAA,8OAAC,2JAAA,CAAA,UAAU;;;;;;;;;;wBAGf,4BACE,8OAAC,yNAAA,CAAA,iBAAc;4BAAC,UAAS;sCACvB,cAAA,8OAAC,6MAAA,CAAA,aAAU;gCAAC,SAAS;0CACnB,cAAA,8OAAC,4JAAA,CAAA,UAAW;;;;;;;;;;;;;;;oBAIpB;;;;;;;;;;;YAIH,wBACC,8OAAC,wLAAA,CAAA,MAAG;gBAAC,IAAI;oBAAE,SAAS;oBAAQ,gBAAgB;oBAAU,IAAI;gBAAE;0BAC1D,cAAA,8OAAC,+NAAA,CAAA,mBAAgB;;;;;;;;;qCAGnB,8OAAC,8LAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,UAAU;gBAAO;0BAC5B,cAAA,8OAAC,8LAAA,CAAA,QAAK;;sCACJ,8OAAC,0MAAA,CAAA,YAAS;sCACR,cAAA,8OAAC,uMAAA,CAAA,WAAQ;;kDACP,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;kDACX,8OAAC,0MAAA,CAAA,YAAS;kDAAC;;;;;;;;;;;;;;;;;sCAGf,8OAAC,0MAAA,CAAA,YAAS;sCACP,iBAAiB,GAAG,CAAC,CAAC,wBACrB,8OAAC,uMAAA,CAAA,WAAQ;;sDACP,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,WAAW;;;;;;sDAC/B,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,kBAAkB;;;;;;sDACtC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,gBAAgB;;;;;;sDACpC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,mBAAmB;;;;;;sDACvC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,gBAAgB;;;;;;sDACpC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,QAAQ;;;;;;sDAC5B,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,SAAS;;;;;;sDAC7B,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,QAAQ;;;;;;sDAC5B,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,iBAAiB;;;;;;sDACrC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,oBAAoB;;;;;;sDACxC,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,wBAAwB;;;;;;sDAC5C,8OAAC,0MAAA,CAAA,YAAS;sDAAE,QAAQ,uBAAuB;;;;;;;mCAZ9B,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqB1C","debugId":null}}]
}